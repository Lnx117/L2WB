package main

import "fmt"

func main() {
	ak47, _ := getGun("ak47")
	musket, _ := getGun("musket")

	printDetails(ak47)
	printDetails(musket)
}

func printDetails(g iGun) {
	fmt.Printf("Gun: %s", g.getName())
	fmt.Println()
	fmt.Printf("Power: %d", g.getPower())
	fmt.Println()
}

/* Преимущества и недостатки

+ Избавляет класс от привязки к конкретным классам продуктов.
+ Выделяет код производства продуктов в одно место, упрощая поддержку кода.
+ Упрощает добавление новых продуктов в программу.
+ Реализует принцип открытости/закрытости.

- Может привести к созданию больших параллельных иерархий классов,
так как для каждого класса продукта надо создать свой подкласс создателя.


В этом примере мы будем создавать разные типы оружия при помощи структуры фабрики.

Сперва, мы создадим интерфейс iGun, который определяет все методы будущих пушек.
Также имеем структуру gun (пушка), которая применяет интерфейс iGun.
Две конкретных пушки — ak47 и musket — обе включают в себя структуру gun и не напрямую реализуют все методы от iGun.

gunFactory служит фабрикой, которая создает пушку нужного типа в зависимости от аргумента на входе.
Клиентом служит main.go .
Вместо прямого взаимодействия с объектами ak47 или musket, он создает экземпляры различного оружия при помощи gunFactory,
используя для контроля изготовления только параметры в виде строк.
*/

package main

func main() {

	cashier := &cashier{}

	//Set next for medical department
	medical := &medical{}
	medical.setNext(cashier)

	//Set next for doctor department
	doctor := &doctor{}
	doctor.setNext(medical)

	//Set next for reception department
	reception := &reception{}
	reception.setNext(doctor)

	//Так как в методах выше есть проверка на выполнение предыдущего, то мы попадаем сначала сюда, пропуская все что выше
	patient := &patient{name: "abc"}
	//Patient visiting
	reception.execute(patient)
}

/*
## Преимущества и недостатки

+ Уменьшает зависимость между клиентом и обработчиками.
+ Реализует _принцип единственной обязанности_.
+ Реализует _принцип открытости/закрытости_.

- Запрос может остаться никем не обработанным.

## Применимость
 Когда важно, чтобы обработчики выполнялись один за другим в строгом порядке.



Давайте рассмотрим паттерн Цепочка обязанностей на примере приложения больницы.
Госпиталь может иметь разные помещения, например:

Приемное отделение
Доктор
Комната медикаментов
Кассир
Когда пациент прибывает в больницу, первым делом он попадает в Приемное отделение, оттуда – к Доктору,
затем в Комнату медикаментов, после этого – к Кассиру, и так далее. Пациент проходит по цепочке помещений,
в которой каждое отправляет его по ней дальше сразу после выполнения своей функции.

Этот паттерн можно применять в случаях, когда для выполнения одного запроса есть несколько кандидатов,
и когда вы не хотите, чтобы клиент сам выбирал исполнителя. Важно знать, что клиента необходимо оградить от исполнителей,
ему необходимо знать лишь о существовании первого звена цепи.

Используя пример больницы, пациент сперва попадает в Приемное отделение.
Затем, зависимо от его состояния, Приемное отделение отправляет его к следующему исполнителю в цепи.

Есть класс пациента с флагами прохода стадий, и классы мест которые ему надо пройти. Классы мест реализуют один интерфейс. Каждый
из них содержит в себе объект следующего места а такжи методы, сделать что-то и пойти дальше, либо просто пойти дальше если это
уже пройдено.
*/

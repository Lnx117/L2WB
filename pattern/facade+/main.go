package main

import (
	"time"
)

func main() {
	facade := NewFacade()
	facade.turnOn()
	time.Sleep(2 * time.Second)
	facade.turnOff()
}

//Фасад содержит в себе объект(ы) имеющий сложную логику. Используя методы объекта в своих собственных
//фасад упрощает работу с ними. Можно сократить до одной функции фасада
type Facade struct {
	computer Computer
}

func NewFacade() *Facade {
	return &Facade{
		computer: Computer{},
	}
}

func (f *Facade) turnOn() {
	f.computer.GetElectric()
	f.computer.GetLoadingScreen()
	f.computer.SayHelloUser()
	f.computer.ReadyToWork()
}

func (f *Facade) turnOff() {
	f.computer.StoppingAllPrograms()
	f.computer.getTurnOffScreen()
	f.computer.StopGettingElectric()
}

/*
**Фасад** — это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов,
библиотеке или фреймворку.

## Преимущества и недостатки

+  Изолирует клиентов от компонентов сложной подсистемы.

-  Фасад рискует стать объектом, привязанным ко всем классам программы.

## Применимость

 Когда вам нужно представить простой или урезанный интерфейс к сложной подсистеме.

 Когда вы хотите разложить подсистему на отдельные слои.

 Фасад содержит в себе объект(ы) имеющий сложную логику. Используя методы объекта в своих собственных
Фасад упрощает работу с ними. Можно сократить до одной функции фасада
Это как надстройка над сложным объектом, которая в своих методах использует по несколько методов сложного объекта
*/
